

	use Bio::Perl;
	use Bio::SeqIO;
	use Bio::Seq;


$gff=shift;
$folder=shift;
$snp_file=shift;
$make_fasta=shift; # Make gene fastas? y/n def:n
$cpu=shift;


if ($make_fasta eq ""){$make_fasta = "n";}

$concatenate="$folder/Results/$folder.multifaconc.fasta";
$output="$snp_file.annotated";
$position_file="$folder/Results/$folder.mergedsnps.tab.allbases.position";


my $multifasta  = Bio::SeqIO->new( -format => 'fasta',-file => $concatenate) or die; 


while($seq=$multifasta->next_seq)
{
	$hash_seq{$seq->display_id}=$seq->seq;
}

@k_seq=keys %hash_seq;

open(SNP,"<$snp_file");
open(SAN,">$output");

open(POS,"<$position_file");

while(<POS>)
{
	chomp $_;
	@s_pos=split("\t",$_);
	$hash_pos{$s_pos[2]}=$_;
	$hash_pos_contig{$s_pos[0]."_".$s_pos[1]}=$s_pos[3];
}


if ($make_fasta eq "y")
{
mkdir("$folder/Results/NOT_CONSERVED_GENES");
mkdir("$folder/Results/CONSERVED_GENES");
}

$c=0;
while (<SNP>)
{

chomp $_;


	if ($c == 0)
	{			
		@s_snp=split(" ",$_);
		@k_seq2=@s_snp[1..$#s_snp];
		print SAN "SNP_type\tContig_name\tContig_pos\tUnpadded_pos\tPadded_pos\t",join("\t",@s_snp[1..$#s_snp]),"\n";
		$c++;
	}

	else
	{		
		@s_snp=split(" ",$_);
		@s_awk_snp=split("\t",$hash_pos{$s_snp[0]});

		
		$awk_gene_command="";
		$awk_gene_command=`awk '\$1 == \"$s_awk_snp[0]\"' $gff | awk '\$3 == CDS' - | awk '\$4 <= $s_awk_snp[1]' - | awk '\$5 >= $s_awk_snp[1]' -`;

		
if ($awk_gene_command ne "")
 {

	$snp_count=0;
	@s_awk_gene_command=split("\n",$awk_gene_command);

	foreach $awk_gene(@s_awk_gene_command)
	{chomp $awk_gene;

	 $snp_count++;

		chomp $awk_gene;

		@s_awk_gene=split("\t",$awk_gene);

					
					$len=$s_awk_gene[4]-$s_awk_gene[3]+1;
					$start=$hash_pos_contig{$s_awk_gene[0]."_".$s_awk_gene[3]}-1;

					%hash_check=();					
					$multi_out="";
					foreach $org(@k_seq2)
					{

						$gene=substr ($hash_seq{$org}, $start, $len);
						$conto_trattini = ($gene =~ tr/-//);

$hash_mat_genes{"GENE"."_".$s_awk_gene[0]."_".$s_awk_gene[3]."-".$s_awk_gene[4]."(".$s_awk_gene[6].")"}="";
$hash_matrix{"GENE"."_".$s_awk_gene[0]."_".$s_awk_gene[3]."-".$s_awk_gene[4]."(".$s_awk_gene[6].")"}{$org}=(abs(length($gene)-$conto_trattini))/length($gene);

						$seq_gene = Bio::Seq->new(-seq => $gene,-alphabet => 'dna' );

	if ($s_awk_gene[6] eq "+"){$aa=$seq_gene->translate->seq;$hash_check{$aa}="";$multi_out=$multi_out.">$org&&&$s_awk_gene[0]\_$s_awk_gene[3]-$s_awk_gene[4]_+\n".$seq_gene->seq."\n";}
	elsif ($s_awk_gene[6] eq "-"){$aa=$seq_gene->revcom->translate->seq;$hash_check{$aa}="";$multi_out=$multi_out.">$org&&&$s_awk_gene[0]\_$s_awk_gene[3]-$s_awk_gene[4]_-\n".$seq_gene->revcom->seq."\n";}
					}



					@k_check=keys %hash_check;

					if ($#k_check > 0)
					{
					   print SAN $s_snp[$#s_snp],"_",$snp_count,"\t",$hash_pos{$s_snp[0]},"\t",join("\t",@s_snp[1..$#s_snp-1]),"\t","GENIC\tNOT_CONSERVED\t",$awk_gene,"\n";


if ($make_fasta eq "y")
{					
						if (-e "$folder/Results/NOT_CONSERVED_GENES/GENE_$s_awk_gene[0]_$s_awk_gene[3]-$s_awk_gene[4]($s_awk_gene[6]).fasta"){}
						else{
					   		open(OUT,">$folder/Results/NOT_CONSERVED_GENES/GENE_$s_awk_gene[0]_$s_awk_gene[3]-$s_awk_gene[4]($s_awk_gene[6]).fasta");
					   		print OUT $multi_out;
					   		close(OUT);
						    }

}

					}

					else
					{print SAN $s_snp[$#s_snp],"_",$snp_count,"\t",$hash_pos{$s_snp[0]},"\t",join("\t",@s_snp[1..$#s_snp-1]),"\t","GENIC\tCONSERVED\t",$awk_gene,"\n";

if ($make_fasta eq "y")
{					

						if (-e "$folder/Results/CONSERVED_GENES/GENE_$s_awk_gene[0]_$s_awk_gene[3]-$s_awk_gene[4]($s_awk_gene[6]).fasta"){}
						else{
					   		open(OUT,">$folder/Results/CONSERVED_GENES/GENE_$s_awk_gene[0]_$s_awk_gene[3]-$s_awk_gene[4]($s_awk_gene[6]).fasta");
					   		print OUT $multi_out;
					   		close(OUT);
						    }

}

					}
				

		} # foreach $awk_gene(@s_awk_gene_command)


	} # if ($awk_gene_command ne "")

	

else {


$awk_gene_inter=`awk '\$1 == \"$s_awk_snp[0]\"' $gff | awk '\$3 != CDS' - | awk '\$4 <= $s_awk_snp[1]' - | awk '\$5 >= $s_awk_snp[1]' -`;

if ($awk_gene_inter eq "")
{print SAN $s_snp[$#s_snp],"\t",$hash_pos{$s_snp[0]},"\t",join("\t",@s_snp[1..$#s_snp-1]),"\tINTERGENIC\n";}











}

	
} # else 






}


close(SAN);

open(MAT,">$output.gene_matrix");

print MAT "GENE\t";

foreach $org(@k_seq2)
{
	chomp $org;
	print MAT $org,"\t";
}

print MAT "\n";

@k_genes_mat=keys %hash_mat_genes;

foreach $gg(@k_genes_mat)
{
	chomp $gg;
	print MAT $gg,"\t";


	foreach $org(@k_seq2)
	{
		chomp $org;
		print MAT $hash_matrix{$gg}{$org},"\t";
	}

	print MAT "\n";


}

















